import Foundation

extension ProcessInfo {

   public enum Error: Swift.Error {
      case unableToFindEnvironmentVariable(String)
   }

   public static var executableFilePath: String {
      return ProcessInfo.processInfo.arguments[0]
   }

   public static var executableFileName: String {
      return (executableFilePath as NSString).lastPathComponent
   }

   public static var executableDirectoryPath: String {
      return (executableFilePath as NSString).deletingLastPathComponent
   }
}

extension ProcessInfo {

   public func existingEnvironmentVariable(_ name: String) throws -> String {
      if let value = environment[name] {
         return value
      } else {
         throw Error.unableToFindEnvironmentVariable(name)
      }
   }

   public func dumpEnvironment() {
      let info = environment.map { "\($0.key): \($0.value)" }
      print(info.joined(separator: "\n"))
   }
}

extension ProcessInfo {

   public enum Variable: String {
      case pwd = "PWD"
      case home = "HOME"
   }

   public func environmentVariable(_ variable: Variable) -> String? {
      return environment[variable.rawValue]
   }

   public func existingEnvironmentVariable(_ variable: Variable) throws -> String {
      return try existingEnvironmentVariable(variable.rawValue)
   }
}
