# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.102.0"

import "#{ENV['PWD']}/Vendor/WL/Conf/Scripts/fastlane.rb"

XCodeProjectFilePath = "#{ENV['PWD']}/CARingBuffer.xcodeproj"
XCodeProjectSchema = "Developer: Build Everything"

desc "Builds project."
lane :build do
   XcodeBuilder.new(XCodeProjectFilePath).build(XCodeProjectSchema)
end

desc "Cleans project."
lane :clean do
   XcodeBuilder.new(XCodeProjectFilePath).clean(XCodeProjectSchema)
end

desc "Builds when under CI (i.e. Travis)."
lane :ci do
   XcodeBuilder.new(XCodeProjectFilePath).ci("Developer: Analyze Performance")
   XcodeBuilder.new(XCodeProjectFilePath).ci("Demo: CAPlayThrough")
   XcodeBuilder.new(XCodeProjectFilePath).test("Logic Tests: Swift")
end

desc "Runs logic tests."
lane :test do
  XcodeBuilder.new(XCodeProjectFilePath).test("Logic Tests: Swift")
  XcodeBuilder.new(XCodeProjectFilePath).test("Logic Tests: C++")
end

desc "Deploy release to GitHub."
lane :deploy do
   releaseName = File.read("#{ENV['PWD']}/fastlane/ReleaseName.txt").strip
   releaseDescription = File.read("#{ENV['PWD']}/fastlane/ReleaseNotes.txt").strip
   github_release = set_github_release(
     repository_name: "vgorloff/CARingBuffer", api_token: ENV['AWL_GITHUB_TOKEN'], name: releaseName, tag_name: last_git_tag,
     description: releaseDescription, commitish: "master"
   )
end

desc "Autocorrect source code."
lane :autocorrect do
   sh "swiftformat "\
   "--allman false --binarygrouping none --commas inline --comments indent --decimalgrouping none --empty void "\
   "--exponentcase lowercase --header ignore --hexgrouping none --hexliteralcase uppercase --ifdef noindent --indent 3 --insertlines enabled "\
   "--linebreaks lf --octalgrouping none --patternlet inline --ranges spaced --removelines true --semicolons inline --self remove "\
   "--stripunusedargs unnamed-only --trimwhitespace always --wraparguments disabled --wrapelements disabled "\
   "\"#{ENV['PWD']}\""
   sh "swiftlint autocorrect --path #{ENV['PWD']}"
   ImportsOrganizer.new().process(ENV['PWD'])
end

desc "Verify source code."
lane :verify do
   `swiftlint lint --quiet --path #{ENV['PWD']}`
   puts FileHeaderChecker.new(["WaveLabs"]).analyse("#{ENV['PWD']}/Sources")
   puts FileHeaderChecker.new(["WaveLabs"]).analyse("#{ENV['PWD']}/Tests")
   puts FileHeaderChecker.new(["WaveLabs"]).analyse("#{ENV['PWD']}/Vendor/WL")
end