//
//  File.swift
//  
//
//  Created by Vlad Gorlov on 18.02.20.
//

import Foundation
#if os(OSX)
import AppKit

open class AbstractUILogicTestCase<Expectation, TestCase: TestCaseType>: AbstractBaseUILogicTestCase<Expectation, TestCase> where TestCase.Expectation == Expectation {

   private let defaultSize = CGSize(width: 640, height: 480)

   class TestView: NSView {
      override var isFlipped: Bool {
         return true
      }
   }

   class TestViewController: NSViewController {
      override func loadView() {
         view = TestView()
      }
   }

   public func showWindowController(_ wc: NSWindowController, configureHandler: (() throws -> Void)? = nil) {
      guard let window = wc.window else {
         fatalError()
      }
      waitForAnimationTransactionCompleted {
         wc.showWindow(nil)
      }
      do {
         try configureHandler?()
      } catch {
         assert.shouldNeverHappen(error, file: #file, line: #line)
      }
      // TODO: Take screenshot here
      // add(XCTAttachment(screenshot: ...))
      if testEnvironment.isUnderPlaygroundTesting {
         let exp = testCase.expectation(forNotification: NSWindow.willCloseNotification, object: window, handler: nil)
         wait(expectation: exp)
      }
   }

   func showFloatingWindow(_ window: NSWindow) {
      window.level = .floating
      showWindow(window)
   }

   public func showWindow(_ window: NSWindow, configureHandler: (() throws -> Void)? = nil) {
      let wc = NSWindowController(window: window)
      if let screenSize = window.screen?.visibleFrame.size {
         let frameSize = window.contentRect(forFrameRect: window.frame).size
         let origin = NSPoint(x: (screenSize.width - frameSize.width) / 2,
                              y: (screenSize.height - frameSize.height) / 2)

         window.setFrameOrigin(origin)
      }
      showWindowController(wc, configureHandler: configureHandler)
   }

   public func showViewController(_ vc: NSViewController, size: CGSize? = nil,
                                  configureBlock: (() throws -> Void)? = nil) {
      var windowSize = size ?? defaultSize
      let zeroValue = CGFloat.leastNormalMagnitude
      if vc.preferredContentSize.width > zeroValue, vc.preferredContentSize.height > zeroValue {
         windowSize = vc.preferredContentSize
      }
      let styleMask: NSWindow.StyleMask = [.closable, .titled, .miniaturizable, .resizable]
      let contentRect = CGRect(x: 0, y: 0, width: windowSize.width, height: windowSize.height)
      let window = NSWindow(contentRect: contentRect, styleMask: styleMask, backing: .buffered, defer: true)
      window.level = .floating
      let frameSize = window.contentRect(forFrameRect: window.frame).size
      vc.view.setFrameSize(frameSize)
      window.contentViewController = vc
      showWindow(window, configureHandler: configureBlock)
   }

   public func showView(_ view: NSView, size: CGSize? = nil, insets: NSEdgeInsets = NSEdgeInsets(), shouldAutoresizeView: Bool = true) {
      let vc = TestViewController()
      vc.view.addSubview(view)
      var viewSize = CGSize()
      if let size = size {
         viewSize = size
      } else {
         viewSize = view.fittingSize
         if viewSize.width < CGFloat.leastNormalMagnitude || viewSize.height < CGFloat.leastNormalMagnitude {
            viewSize = view.intrinsicContentSize
         }
         if viewSize.width < CGFloat.leastNormalMagnitude || viewSize.height < CGFloat.leastNormalMagnitude {
            viewSize = defaultSize
         }
      }
      let frame = CGRect(origin: CGPoint(x: 0, y: 0), size: viewSize).insetBy(dx: insets.left + insets.right,
                                                                              dy: insets.top + insets.bottom)
      view.frame = frame
      if shouldAutoresizeView {
         view.translatesAutoresizingMaskIntoConstraints = false
         let constraints = [vc.view.topAnchor.constraint(equalTo: view.topAnchor, constant: -insets.top),
                            vc.view.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: insets.bottom),
                            vc.view.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: -insets.left),
                            vc.view.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: insets.right)]
         NSLayoutConstraint.activate(constraints)
      }
      showViewController(vc, size: viewSize)
   }
}
#endif
