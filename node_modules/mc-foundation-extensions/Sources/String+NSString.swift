import Foundation

extension String {

   public var toPath: Path {
      return Path(path: self)
   }

   public var toDir: Dir {
      return Dir(path: self)
   }

   public var pathExtension: String {
      return toPath.extension
   }

   public var deletingLastPathComponent: String {
      return (self as NSString).deletingLastPathComponent
   }

   public func appendingPathComponent(_ str: String) -> String {
      return toPath.appendComponent(str)
   }

   public func appendingPathComponents(_ values: [String]) -> String {
      return values.reduce(self) { $0.appendingPathComponent($1) }
   }

   public func appendingPathComponents(_ values: String...) -> String {
      return appendingPathComponents(values)
   }

   public var deletingPathExtension: String {
      return (self as NSString).deletingPathExtension
   }

   public func appendingPathExtension(_ str: String) -> String? {
      return (self as NSString).appendingPathExtension(str)
   }

   public var pathComponents: [String] {
      return (self as NSString).pathComponents
   }

   public var lastPathComponent: String {
      return (self as NSString).lastPathComponent
   }

   public var expandingTildeInPath: String {
      return (self as NSString).expandingTildeInPath
   }

   public var abbreviatingWithTildeInPath: String {
      return (self as NSString).abbreviatingWithTildeInPath
   }

   public func replacingCharacters(in nsRange: NSRange, with: String) -> String {
      return (self as NSString).replacingCharacters(in: nsRange, with: with)
   }

   public func nsRange(of searchString: String) -> NSRange {
      return (self as NSString).range(of: searchString)
   }

   public func deletingLastPathComponents(_ numberOfComponents: Int) -> String {
      var result = self
      for _ in 0 ..< numberOfComponents {
         result = result.deletingLastPathComponent
      }
      return result
   }
}
